const express = require("express"), app = express(), path = require("path"), router = express.Router(), users = require(path.join(__dirname, "..", "schema", "users")), posts = require(path.join(__dirname, "..", "schema", "posts")), bcrypt = require("bcryptjs"), token = require("jsonwebtoken"), cookie_parser = require("cookie-parser"), { body, validationResult } = require("express-validator"); app.use(cookie_parser()); const cookie_name = "cookie", cookie_secret = process.env.COOKIE_SECRET, login_layout = path.join(__dirname, "..", "..", "views", "layouts", "login.ejs"), user_layout = path.join(__dirname, "..", "..", "views", "layouts", "users.ejs"), user_layout_nosearch = path.join(__dirname, "..", "..", "views", "layouts", "users_nosearch.ejs"); router.route("/login").get(async function (a, b) { try { b.render("users/login", { meta: { name: "MongoXpress" }, layout: login_layout }) } catch (a) { } }).post(async (a, b) => { try { const { email: c, password: d } = a.body, e = await users.findOne({ email: c }), f = token.sign({ userId: e._id }, cookie_secret), g = await bcrypt.compare(d, e.password); if (g) return b.cookie("cookie", f, { httpOnly: !0, path: "/" }), b.redirect("/users/profile"); if (!g) return b.redirect("/login_err") } catch (a) { return b.redirect("/login_notuser") } }), router.get("/login_err", async (a, b) => { try { b.render(path.join(__dirname, "..", "..", "views", "users", "login_bad.ejs"), { meta: { name: "MongoXpress" }, layout: login_layout }) } catch (a) { } }), router.get("/login_notuser", async (a, b) => { try { b.render(path.join(__dirname, "..", "..", "views", "users", "login_notuser.ejs"), { meta: { name: "MongoXpress" }, layout: login_layout }) } catch (a) { } }), router.route("/add").get(async function (a, b) { try { if (a.cookies[cookie_name]) { const a = await posts.find(); b.render(path.join(__dirname, "..", "..", "views", "users", "add.ejs"), { meta: { name: "MongoXpress" }, data: a, layout: user_layout_nosearch }) } else return b.redirect("/") } catch (a) { } }).post(async function (a, b) { try { if (a.cookies[cookie_name]) { const c = new posts({ title: a.body.title, body: a.body.content }); return await posts.create(c), b.redirect("/") } return b.redirect("/") } catch (a) { } }), router.get("/users/edit/:id", async (a, b) => { try { if (a.cookies[cookie_name]) { const c = await posts.findOne({ _id: a.params.id }); b.render(path.join(__dirname, "..", "..", "views", "users", "edit.ejs"), { meta: { name: "MongoXpress" }, post_data: c, layout: user_layout_nosearch }) } else return b.redirect("/") } catch (a) { } }), router.patch("/edit/:id", async (a, b) => { try { return a.cookies[cookie_name] ? (await posts.findByIdAndUpdate(a.params.id, { title: a.body.title, body: a.body.content, update_date: Date.now() }), b.redirect("/users/profile")) : b.redirect("/") } catch (a) { } }), router.delete("/erase/:id", async (a, b) => { try { return a.cookies[cookie_name] ? (await posts.deleteOne({ _id: a.params.id }), b.redirect(path.join(__dirname, "views", "users", "profile.ejs"))) : b.redirect("/") } catch (a) { } }), router.route("/signup").get(async function (a, b) { try { b.render("users/signup", { meta: { name: "MongoXpress" }, layout: login_layout }) } catch (a) { } }).post([body("email").trim().isEmail().toLowerCase(), body("password").trim()], async (a, b) => { try { const { email: c, password: d } = a.body; let e = Math.floor(1e9 * Math.random()); const f = c.trim().toLowerCase(), g = d.trim(), h = await bcrypt.hash(g, 10), i = await users.findOne({ sanitizedemail: f }); if (i) return b.redirect("/signup_err.ejs"); else { const a = await users.create({ username: e, email: f, password: h }), c = token.sign({ userId: a._id }, cookie_secret); return b.cookie("cookie", c, { httpOnly: !0, path: "/" }), b.redirect("/") } } catch (a) { b.render(path.join(__dirname, "..", "..", "views", "users", "signup_err.ejs"), { meta: { name: "MongoXpress" }, layout: login_layout }) } }), router.get("/users/profile", async (a, b) => { let c = 6, d = a.query.page || 1; try { if (a.cookies[cookie_name]) { const a = await posts.find().sort({ date: -1 }).skip(c * d - c).limit(c).exec(), e = await posts.count(), f = parseInt(d) + 1, g = f <= Math.ceil(e / c), h = parseInt(d) - 1, i = f >= Math.ceil(e / c); b.render(path.join(__dirname, "..", "..", "views", "users", "profile.ejs"), { meta: { name: "MongoXpress" }, data: a, layout: user_layout, current: d, nextpage: g ? f : null, previous_page: i ? h : null }) } else return b.redirect("/") } catch (a) { } }), router.get("/logout", (a, b) => (b.clearCookie("cookie", { httpOnly: !0, path: "/" }), b.redirect("/"))), module.exports = router;